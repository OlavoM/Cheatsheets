#include <stdio.h>  //importa a biblioteca standard in out para input e output
#include <stdlib.h> //para usar funções system()
#include <stdbool.h> //para usar booleanos
#include <conio.h> //para getch e colorir
#include <time.h> //para numeros aleatorios em conjuto com stdlib.h
#include <malloc.h> //para trabalhar com alocação dinâmica de memória

#define TAM 5 //TAM significa 5 (sem colocar ; no final)

main() //função principal, o compilador acha que é função para retornar inteiro
{printf("Hello, World!\n");} //imprimir

scanf("%f", &numero); //input de dados
scanf(" %c", &caractere); //contorna bug do input com enter

//operadores
x++; //ou ++x, incrementa x
x--; //ou --x, decrementa x
&& //AND
|| //OR
! //NOT
<< //deslocamento binário para a esquerda (1<<30 == 2^30)
>> //deslocamento binário para a direita

//operadores compospostos de atribuição
num +=5; //num = num + 5
num -=1; //num = num - 1
num *=5; //num = num * 5
num /=5; //num = num / 5

for(int i=0; i<5; i++) //(passo inicial; condição de execução; passo executado a cada iteração)
	printf("%d", i); //é um for de uma linha

int i =0;
while (i<5){ //enquanto a condição for atendida o laço é executado
	printf("%d", i);
	i++;
}

//vetores
int v[10]; //vetor de tamanho 10 com valores anteriores da memória
v[x] = x; //vetor na posição x recebe x
int a[5] = {1,2,3}; //vetor inicializado, fica com [1,2,3,0,0], eficaz quando se tem conhecimento dos valores
vetor[10] {} //vetor inicializado e zerado
memset(vetor,1,8) //vetor com as 8 primeiras posições com 1

//matriz ■
int matriz[10][5]; //cria matriz de inteiros com 10 linhas e 5 colunas
zerarMatriz(matriz) //passa pra função pelo nome
void zerarMatriz(int matriz[][n_colunas]) //chama especificando o numero de colunas


//pointeiros e endereços
int *ponteiro; //ponteiro de inteiros
ponteiro = &variavel; //ponteiro recebe o endereço da variável

//numeros aleatorios
srand(time(NULL)); //zera para que o valor aleatório seja sempre novo
int numero_aleatorio =  (rand() % 100) + 1; //inteiro aleatorio de 1 a 100 (0 a 99 + 1depois)

//alocação dinâmica de memória
int *criaVetorInt(int tamanho){ //retorna ponteiro
    int *vetor;
    vetor = malloc(tamanho * sizeof(int)); //em C++ adiciona-se a conversão antes de malloc '(int *)'
    return vetor;
}

struct nomeDaEstrutura{
    char letra;
    int numero;
};

//laços infinitos
for(;;)
while(|)
while(1) //C não tem booleano, a condição retorna 0 ou 1

//quebrando linhas
é só colocar "\" na linha que pode digitar na de baixo

// Separar numeros grandes pelos milhares
int milhao = 1'000'000;

//Pthread
pthread_t threads[QTD]; //declaracao de threads
pthread_create(&threads[0], NULL, depositos, &saldo); //global, invocando thread, especificando vetor e posição, NULL para configurações default, função e parametros dela (só tem & aí pois era um ponteiro mesmo)
pthread_join(threads[0], NULL); //reune as treads na main
pthread_mutex_t trava; //global, declaração de mutex, uma trava para seções críticas
pthread_mutex_init(&trava, NULL); 
void *depositos(double *x){ //função para thread tem que ter * (parametro era ponteiro)
    for(int i=0; i<21474830; i++){
        pthread_mutex_lock(&trava);
        *x += 5.0;
        pthread_mutex_unlock(&trava);
    }
    pthread_exit(0); //sai da thread
}
gcc -pthread nomeDoPrograma.c -o nomeDoPrograma //compila com esse comando

//OpenMP
#include <omp.h>
int maxThreads = omp_get_max_threads(); //threads lógicas
IDThread = omp_get_thread_num();
#pragma omp parallel
{
	//trecho paralelo, automaticamente será executado em todas as threads disponíveis
}
#pragma omp parallel for
    for() //for paralelo automaticamente distribuído entre as threads
gcc nomeDoPrograma.c -o nomeDoPrograma -fopenmp //compila com esse comando
OMP_NUM_THREADS=$x //x processadores, eh uma variavel de ambiente

//erros comuns do compilador
initializer element is not constant //alguma variável não está dentro de uma função e ocorre uma confusão no global


